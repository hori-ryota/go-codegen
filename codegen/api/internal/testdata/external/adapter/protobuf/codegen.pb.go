// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.2
// source: codegen.proto

package protobuf

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StringEnum int32

const (
	StringEnum_UNKNOWN_STRING_ENUM StringEnum = 0
	StringEnum_STRING_A            StringEnum = 1
	StringEnum_STRING_B            StringEnum = 2
	StringEnum_STRING_C            StringEnum = 3
)

// Enum value maps for StringEnum.
var (
	StringEnum_name = map[int32]string{
		0: "UNKNOWN_STRING_ENUM",
		1: "STRING_A",
		2: "STRING_B",
		3: "STRING_C",
	}
	StringEnum_value = map[string]int32{
		"UNKNOWN_STRING_ENUM": 0,
		"STRING_A":            1,
		"STRING_B":            2,
		"STRING_C":            3,
	}
)

func (x StringEnum) Enum() *StringEnum {
	p := new(StringEnum)
	*p = x
	return p
}

func (x StringEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_codegen_proto_enumTypes[0].Descriptor()
}

func (StringEnum) Type() protoreflect.EnumType {
	return &file_codegen_proto_enumTypes[0]
}

func (x StringEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringEnum.Descriptor instead.
func (StringEnum) EnumDescriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{0}
}

type IntEnum int32

const (
	IntEnum_UNKNOWN_INT_ENUM IntEnum = 0
	IntEnum_INT_ONE          IntEnum = 1
	IntEnum_INT_THREE        IntEnum = 2
	IntEnum_INT_TWO          IntEnum = 3
)

// Enum value maps for IntEnum.
var (
	IntEnum_name = map[int32]string{
		0: "UNKNOWN_INT_ENUM",
		1: "INT_ONE",
		2: "INT_THREE",
		3: "INT_TWO",
	}
	IntEnum_value = map[string]int32{
		"UNKNOWN_INT_ENUM": 0,
		"INT_ONE":          1,
		"INT_THREE":        2,
		"INT_TWO":          3,
	}
)

func (x IntEnum) Enum() *IntEnum {
	p := new(IntEnum)
	*p = x
	return p
}

func (x IntEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_codegen_proto_enumTypes[1].Descriptor()
}

func (IntEnum) Type() protoreflect.EnumType {
	return &file_codegen_proto_enumTypes[1]
}

func (x IntEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntEnum.Descriptor instead.
func (IntEnum) EnumDescriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{1}
}

type DoingSomethingWithOutputAndActorUsecaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam                     string                                                                          `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
	IntParam                        int64                                                                           `protobuf:"varint,2,opt,name=int_param,json=intParam,proto3" json:"int_param,omitempty"`
	Int64Param                      int64                                                                           `protobuf:"varint,3,opt,name=int64_param,json=int64Param,proto3" json:"int64_param,omitempty"`
	UintParam                       uint64                                                                          `protobuf:"varint,4,opt,name=uint_param,json=uintParam,proto3" json:"uint_param,omitempty"`
	Uint64Param                     uint64                                                                          `protobuf:"varint,5,opt,name=uint64_param,json=uint64Param,proto3" json:"uint64_param,omitempty"`
	Float32Param                    float32                                                                         `protobuf:"fixed32,6,opt,name=float32_param,json=float32Param,proto3" json:"float32_param,omitempty"`
	Float64Param                    float64                                                                         `protobuf:"fixed64,7,opt,name=float64_param,json=float64Param,proto3" json:"float64_param,omitempty"`
	BytesParam                      []byte                                                                          `protobuf:"bytes,8,opt,name=bytes_param,json=bytesParam,proto3" json:"bytes_param,omitempty"`
	AnonymousNestedStructParam      *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam        `protobuf:"bytes,9,opt,name=anonymous_nested_struct_param,json=anonymousNestedStructParam,proto3" json:"anonymous_nested_struct_param,omitempty"`
	NamedNestedStructParam          *NamedSomeType                                                                  `protobuf:"bytes,10,opt,name=named_nested_struct_param,json=namedNestedStructParam,proto3" json:"named_nested_struct_param,omitempty"`
	StringEnumParam                 StringEnum                                                                      `protobuf:"varint,11,opt,name=string_enum_param,json=stringEnumParam,proto3,enum=codegen.StringEnum" json:"string_enum_param,omitempty"`
	IntEnumParam                    IntEnum                                                                         `protobuf:"varint,12,opt,name=int_enum_param,json=intEnumParam,proto3,enum=codegen.IntEnum" json:"int_enum_param,omitempty"`
	StringSliceParam                []string                                                                        `protobuf:"bytes,13,rep,name=string_slice_param,json=stringSliceParam,proto3" json:"string_slice_param,omitempty"`
	IntSliceParam                   []int64                                                                         `protobuf:"varint,14,rep,packed,name=int_slice_param,json=intSliceParam,proto3" json:"int_slice_param,omitempty"`
	Int64SliceParam                 []int64                                                                         `protobuf:"varint,15,rep,packed,name=int64_slice_param,json=int64SliceParam,proto3" json:"int64_slice_param,omitempty"`
	UintSliceParam                  []uint64                                                                        `protobuf:"varint,16,rep,packed,name=uint_slice_param,json=uintSliceParam,proto3" json:"uint_slice_param,omitempty"`
	Uint64SliceParam                []uint64                                                                        `protobuf:"varint,17,rep,packed,name=uint64_slice_param,json=uint64SliceParam,proto3" json:"uint64_slice_param,omitempty"`
	Float32SliceParam               []float32                                                                       `protobuf:"fixed32,18,rep,packed,name=float32_slice_param,json=float32SliceParam,proto3" json:"float32_slice_param,omitempty"`
	Float64SliceParam               []float64                                                                       `protobuf:"fixed64,19,rep,packed,name=float64_slice_param,json=float64SliceParam,proto3" json:"float64_slice_param,omitempty"`
	BytesSliceParam                 [][]byte                                                                        `protobuf:"bytes,20,rep,name=bytes_slice_param,json=bytesSliceParam,proto3" json:"bytes_slice_param,omitempty"`
	AnonymousNestedStructSliceParam []*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam `protobuf:"bytes,21,rep,name=anonymous_nested_struct_slice_param,json=anonymousNestedStructSliceParam,proto3" json:"anonymous_nested_struct_slice_param,omitempty"`
	NamedNestedStructSliceParam     []*NamedSomeType                                                                `protobuf:"bytes,22,rep,name=named_nested_struct_slice_param,json=namedNestedStructSliceParam,proto3" json:"named_nested_struct_slice_param,omitempty"`
	StringEnumSliceParam            []StringEnum                                                                    `protobuf:"varint,23,rep,packed,name=string_enum_slice_param,json=stringEnumSliceParam,proto3,enum=codegen.StringEnum" json:"string_enum_slice_param,omitempty"`
	IntEnumSliceParam               []IntEnum                                                                       `protobuf:"varint,24,rep,packed,name=int_enum_slice_param,json=intEnumSliceParam,proto3,enum=codegen.IntEnum" json:"int_enum_slice_param,omitempty"`
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) Reset() {
	*x = DoingSomethingWithOutputAndActorUsecaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputAndActorUsecaseInput) ProtoMessage() {}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputAndActorUsecaseInput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputAndActorUsecaseInput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{0}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetIntParam() int64 {
	if x != nil {
		return x.IntParam
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetInt64Param() int64 {
	if x != nil {
		return x.Int64Param
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetUintParam() uint64 {
	if x != nil {
		return x.UintParam
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetUint64Param() uint64 {
	if x != nil {
		return x.Uint64Param
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetFloat32Param() float32 {
	if x != nil {
		return x.Float32Param
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetFloat64Param() float64 {
	if x != nil {
		return x.Float64Param
	}
	return 0
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetBytesParam() []byte {
	if x != nil {
		return x.BytesParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetAnonymousNestedStructParam() *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam {
	if x != nil {
		return x.AnonymousNestedStructParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetNamedNestedStructParam() *NamedSomeType {
	if x != nil {
		return x.NamedNestedStructParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetStringEnumParam() StringEnum {
	if x != nil {
		return x.StringEnumParam
	}
	return StringEnum_UNKNOWN_STRING_ENUM
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetIntEnumParam() IntEnum {
	if x != nil {
		return x.IntEnumParam
	}
	return IntEnum_UNKNOWN_INT_ENUM
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetStringSliceParam() []string {
	if x != nil {
		return x.StringSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetIntSliceParam() []int64 {
	if x != nil {
		return x.IntSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetInt64SliceParam() []int64 {
	if x != nil {
		return x.Int64SliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetUintSliceParam() []uint64 {
	if x != nil {
		return x.UintSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetUint64SliceParam() []uint64 {
	if x != nil {
		return x.Uint64SliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetFloat32SliceParam() []float32 {
	if x != nil {
		return x.Float32SliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetFloat64SliceParam() []float64 {
	if x != nil {
		return x.Float64SliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetBytesSliceParam() [][]byte {
	if x != nil {
		return x.BytesSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetAnonymousNestedStructSliceParam() []*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam {
	if x != nil {
		return x.AnonymousNestedStructSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetNamedNestedStructSliceParam() []*NamedSomeType {
	if x != nil {
		return x.NamedNestedStructSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetStringEnumSliceParam() []StringEnum {
	if x != nil {
		return x.StringEnumSliceParam
	}
	return nil
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput) GetIntEnumSliceParam() []IntEnum {
	if x != nil {
		return x.IntEnumSliceParam
	}
	return nil
}

type NamedSomeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *NamedSomeType) Reset() {
	*x = NamedSomeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedSomeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSomeType) ProtoMessage() {}

func (x *NamedSomeType) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSomeType.ProtoReflect.Descriptor instead.
func (*NamedSomeType) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{1}
}

func (x *NamedSomeType) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithOutputAndActorUsecaseOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithOutputAndActorUsecaseOutput) Reset() {
	*x = DoingSomethingWithOutputAndActorUsecaseOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputAndActorUsecaseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputAndActorUsecaseOutput) ProtoMessage() {}

func (x *DoingSomethingWithOutputAndActorUsecaseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputAndActorUsecaseOutput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputAndActorUsecaseOutput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{2}
}

func (x *DoingSomethingWithOutputAndActorUsecaseOutput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithOutputWithoutActorUsecaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseInput) Reset() {
	*x = DoingSomethingWithOutputWithoutActorUsecaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputWithoutActorUsecaseInput) ProtoMessage() {}

func (x *DoingSomethingWithOutputWithoutActorUsecaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputWithoutActorUsecaseInput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputWithoutActorUsecaseInput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{3}
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseInput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithOutputWithoutActorUsecaseOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseOutput) Reset() {
	*x = DoingSomethingWithOutputWithoutActorUsecaseOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputWithoutActorUsecaseOutput) ProtoMessage() {}

func (x *DoingSomethingWithOutputWithoutActorUsecaseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputWithoutActorUsecaseOutput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputWithoutActorUsecaseOutput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{4}
}

func (x *DoingSomethingWithOutputWithoutActorUsecaseOutput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithoutOutputAndActorUsecaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithoutOutputAndActorUsecaseInput) Reset() {
	*x = DoingSomethingWithoutOutputAndActorUsecaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithoutOutputAndActorUsecaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithoutOutputAndActorUsecaseInput) ProtoMessage() {}

func (x *DoingSomethingWithoutOutputAndActorUsecaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithoutOutputAndActorUsecaseInput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithoutOutputAndActorUsecaseInput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{5}
}

func (x *DoingSomethingWithoutOutputAndActorUsecaseInput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithoutOutputWithActorUsecaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithoutOutputWithActorUsecaseInput) Reset() {
	*x = DoingSomethingWithoutOutputWithActorUsecaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithoutOutputWithActorUsecaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithoutOutputWithActorUsecaseInput) ProtoMessage() {}

func (x *DoingSomethingWithoutOutputWithActorUsecaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithoutOutputWithActorUsecaseInput.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithoutOutputWithActorUsecaseInput) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{6}
}

func (x *DoingSomethingWithoutOutputWithActorUsecaseInput) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) Reset() {
	*x = DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) ProtoMessage() {}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

type DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringParam string `protobuf:"bytes,1,opt,name=string_param,json=stringParam,proto3" json:"string_param,omitempty"`
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) Reset() {
	*x = DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codegen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) ProtoMessage() {}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) ProtoReflect() protoreflect.Message {
	mi := &file_codegen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam.ProtoReflect.Descriptor instead.
func (*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) Descriptor() ([]byte, []int) {
	return file_codegen_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam) GetStringParam() string {
	if x != nil {
		return x.StringParam
	}
	return ""
}

var File_codegen_proto protoreflect.FileDescriptor

var file_codegen_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x0c, 0x0a, 0x2c, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x93, 0x01, 0x0a, 0x1d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x1a,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x19, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x6f, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3f, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2e, 0x49, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x13, 0x20, 0x03, 0x28, 0x01, 0x52, 0x11, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0xa3, 0x01, 0x0a,
	0x23, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x1f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x1f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x6f, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x1b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x4a, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x75, 0x6d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x14,
	0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x3f, 0x0a, 0x1a, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x44, 0x0a, 0x1f, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x32, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x52, 0x0a, 0x2d, 0x44, 0x6f,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x63, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x55,
	0x0a, 0x30, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x56, 0x0a, 0x31, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x63, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x54, 0x0a,
	0x2f, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x55, 0x0a, 0x30, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2a, 0x4f, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x10, 0x03, 0x2a, 0x48, 0x0a, 0x07, 0x49,
	0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x57, 0x4f, 0x10, 0x03, 0x32, 0xba, 0x01, 0x0a, 0x27, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73,
	0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1d, 0x44, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x32, 0xca, 0x01, 0x0a, 0x2b, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x21, 0x44, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32,
	0xa2, 0x01, 0x0a, 0x2a, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x20, 0x44, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0xa5, 0x01, 0x0a, 0x2b, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x63, 0x61, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x21, 0x44, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x67, 0x65, 0x6e, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x9e, 0x01, 0x0a,
	0x32, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x6f, 0x72, 0x69,
	0x72, 0x79, 0x6f, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x67, 0x65, 0x6e, 0x42, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x6f, 0x72, 0x69, 0x2d, 0x72, 0x79, 0x6f, 0x74, 0x61, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_codegen_proto_rawDescOnce sync.Once
	file_codegen_proto_rawDescData = file_codegen_proto_rawDesc
)

func file_codegen_proto_rawDescGZIP() []byte {
	file_codegen_proto_rawDescOnce.Do(func() {
		file_codegen_proto_rawDescData = protoimpl.X.CompressGZIP(file_codegen_proto_rawDescData)
	})
	return file_codegen_proto_rawDescData
}

var file_codegen_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_codegen_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_codegen_proto_goTypes = []interface{}{
	(StringEnum)(0), // 0: codegen.StringEnum
	(IntEnum)(0),    // 1: codegen.IntEnum
	(*DoingSomethingWithOutputAndActorUsecaseInput)(nil),                                 // 2: codegen.DoingSomethingWithOutputAndActorUsecaseInput
	(*NamedSomeType)(nil),                                                                // 3: codegen.NamedSomeType
	(*DoingSomethingWithOutputAndActorUsecaseOutput)(nil),                                // 4: codegen.DoingSomethingWithOutputAndActorUsecaseOutput
	(*DoingSomethingWithOutputWithoutActorUsecaseInput)(nil),                             // 5: codegen.DoingSomethingWithOutputWithoutActorUsecaseInput
	(*DoingSomethingWithOutputWithoutActorUsecaseOutput)(nil),                            // 6: codegen.DoingSomethingWithOutputWithoutActorUsecaseOutput
	(*DoingSomethingWithoutOutputAndActorUsecaseInput)(nil),                              // 7: codegen.DoingSomethingWithoutOutputAndActorUsecaseInput
	(*DoingSomethingWithoutOutputWithActorUsecaseInput)(nil),                             // 8: codegen.DoingSomethingWithoutOutputWithActorUsecaseInput
	(*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam)(nil),      // 9: codegen.DoingSomethingWithOutputAndActorUsecaseInput.AnonymousNestedStructParam
	(*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam)(nil), // 10: codegen.DoingSomethingWithOutputAndActorUsecaseInput.AnonymousNestedStructSliceParam
	(*emptypb.Empty)(nil), // 11: google.protobuf.Empty
}
var file_codegen_proto_depIdxs = []int32{
	9,  // 0: codegen.DoingSomethingWithOutputAndActorUsecaseInput.anonymous_nested_struct_param:type_name -> codegen.DoingSomethingWithOutputAndActorUsecaseInput.AnonymousNestedStructParam
	3,  // 1: codegen.DoingSomethingWithOutputAndActorUsecaseInput.named_nested_struct_param:type_name -> codegen.NamedSomeType
	0,  // 2: codegen.DoingSomethingWithOutputAndActorUsecaseInput.string_enum_param:type_name -> codegen.StringEnum
	1,  // 3: codegen.DoingSomethingWithOutputAndActorUsecaseInput.int_enum_param:type_name -> codegen.IntEnum
	10, // 4: codegen.DoingSomethingWithOutputAndActorUsecaseInput.anonymous_nested_struct_slice_param:type_name -> codegen.DoingSomethingWithOutputAndActorUsecaseInput.AnonymousNestedStructSliceParam
	3,  // 5: codegen.DoingSomethingWithOutputAndActorUsecaseInput.named_nested_struct_slice_param:type_name -> codegen.NamedSomeType
	0,  // 6: codegen.DoingSomethingWithOutputAndActorUsecaseInput.string_enum_slice_param:type_name -> codegen.StringEnum
	1,  // 7: codegen.DoingSomethingWithOutputAndActorUsecaseInput.int_enum_slice_param:type_name -> codegen.IntEnum
	2,  // 8: codegen.DoingSomethingWithOutputAndActorUsecase.DoSomethingWithOutputAndActor:input_type -> codegen.DoingSomethingWithOutputAndActorUsecaseInput
	5,  // 9: codegen.DoingSomethingWithOutputWithoutActorUsecase.DoSomethingWithOutputWithoutActor:input_type -> codegen.DoingSomethingWithOutputWithoutActorUsecaseInput
	7,  // 10: codegen.DoingSomethingWithoutOutputAndActorUsecase.DoSomethingWithoutOutputAndActor:input_type -> codegen.DoingSomethingWithoutOutputAndActorUsecaseInput
	8,  // 11: codegen.DoingSomethingWithoutOutputWithActorUsecase.DoSomethingWithoutOutputWithActor:input_type -> codegen.DoingSomethingWithoutOutputWithActorUsecaseInput
	4,  // 12: codegen.DoingSomethingWithOutputAndActorUsecase.DoSomethingWithOutputAndActor:output_type -> codegen.DoingSomethingWithOutputAndActorUsecaseOutput
	6,  // 13: codegen.DoingSomethingWithOutputWithoutActorUsecase.DoSomethingWithOutputWithoutActor:output_type -> codegen.DoingSomethingWithOutputWithoutActorUsecaseOutput
	11, // 14: codegen.DoingSomethingWithoutOutputAndActorUsecase.DoSomethingWithoutOutputAndActor:output_type -> google.protobuf.Empty
	11, // 15: codegen.DoingSomethingWithoutOutputWithActorUsecase.DoSomethingWithoutOutputWithActor:output_type -> google.protobuf.Empty
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_codegen_proto_init() }
func file_codegen_proto_init() {
	if File_codegen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_codegen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputAndActorUsecaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedSomeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputAndActorUsecaseOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputWithoutActorUsecaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputWithoutActorUsecaseOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithoutOutputAndActorUsecaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithoutOutputWithActorUsecaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codegen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingSomethingWithOutputAndActorUsecaseInput_AnonymousNestedStructSliceParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_codegen_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_codegen_proto_goTypes,
		DependencyIndexes: file_codegen_proto_depIdxs,
		EnumInfos:         file_codegen_proto_enumTypes,
		MessageInfos:      file_codegen_proto_msgTypes,
	}.Build()
	File_codegen_proto = out.File
	file_codegen_proto_rawDesc = nil
	file_codegen_proto_goTypes = nil
	file_codegen_proto_depIdxs = nil
}
